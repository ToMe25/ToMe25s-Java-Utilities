# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created,
# after that it will push the modified builds and javadoc back to the github reporitory, it will also create a new github release.
# For more information see https://github.com/actions/setup-java#apache-maven-with-a-settings-path,
# https://github.com/ad-m/github-push-action#example-workflow-file,
# https://github.com/mathieudutour/github-tag-action#usage,
# https://github.com/actions/upload-artifact#upload-using-a-wildcard-pattern
# and https://github.com/actions/upload-release-asset#example-workflow---upload-a-release-asset

name: Maven Build and Publish

on:
  push:
    branches:
      - master

jobs:
  build:
    name: Build and Publish
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Calculate new tag
      id: tag_dry
      uses: mathieudutour/github-tag-action@v4.2
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        dry_run: true # just calculate the new tag name to be used for other things, tag the new commit later, to make the new tag contain the new builds.

    - name: Increase build number
      id: bump_mvn
      run: mvn -B versions:set -D newVersion=${{ steps.tag_dry.outputs.new_version }}

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to Github Packages
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload artifacts
      id: artifacts_upload
      if: ${{ always() }}
      uses: actions/upload-artifact@v2
      with:
        name: build
        path: target/ToMe25s-Java-Utilities-*.jar

    - name: Move artifacts into repository
      id: artifacts_move
      if: ${{ always() }}
      run: |
        for f in target/*.jar; do fo=${f:7}; cp "$f" $(echo "$fo" | sed -r 's/-[0-9]+\.[0-9]+\.[0-9]+-/-/g; s/-[0-9]+\.[0-9]+\.[0-9]+\././g'); done
        rm -r javadoc/*
        mv target/apidocs/* javadoc/

    - name: Generate changelog
      id: changelog
      run: echo "::set-output name=changelog::$(git log ${{ steps.tag_dry.outputs.previous_tag }}..HEAD --no-merges --format=%B)"

    - name: Commit files
      id: commit
      if: ${{ always() }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -m "Update builds
        
        ${{ steps.changelog.outputs.changelog }}" -a
        git tag ${{ steps.tag_dry.outputs.new_tag }}

    - name: Push changes
      id: push
      if: ${{ always() }}
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        tags: true

    - name: Create release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.tag_dry.outputs.new_tag }}
        release_name: Release ${{ steps.tag_dry.outputs.new_version }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Release add build
      id: release_build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./ToMe25s-Java-Utilities.jar
        asset_name: ToMe25s-Java-Utilities.jar
        asset_content_type: application/java-archive

    - name: Release add sources
      id: release_sources
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./ToMe25s-Java-Utilities-sources.jar
        asset_name: ToMe25s-Java-Utilities-sources.jar
        asset_content_type: application/java-archive

    - name: Release add javadoc
      id: release_javadoc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./ToMe25s-Java-Utilities-javadoc.jar
        asset_name: ToMe25s-Java-Utilities-javadoc.jar
        asset_content_type: application/java-archive
